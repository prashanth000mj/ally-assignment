{"version":3,"sources":["components/keyResult/KeyResult.js","components/objective/Objective.js","components/filter/Filter.js","components/filters/Filters.js","components/dialog/OKRDetails.js","components/okr/OKRs.js","App.js","index.js"],"names":["svgMarker","height","width","className","x1","y1","x2","y2","KeyResult","okr","index","selectOKR","charCode","prefixNumber","Math","floor","indexCharacter","String","fromCharCode","fontSize","color","title","onClick","defaultProps","Objective","keyResults","useState","expanded","setExpanded","onKeyResultSelect","selectedOKR","parentObjective","keyResultElements","map","keyResult","keyIndex","id","style","margin","padding","border","borderRadius","display","cursor","Filter","category","selected","toggleFilter","Filters","filters","selectedFilters","filter","has","Set","OKRDetails","onClose","Dialog","open","DialogTitle","DialogContent","dividers","metric_name","metric_start","metric_end","DialogActions","Button","getFiltersAndOkrs","data","okrs","forEach","add","parent","parent_objective_id","push","Array","from","OKRs","objectives","setOkrs","setFilters","setSelectedFilters","setSelectedOKR","loading","setLoading","error","setError","fetchDataFromApi","a","fetch","response","json","okrsFromAPI","filtersFromAPI","message","useEffect","LinearProgress","length","newSelectedFilters","delete","size","getFilteredObjectives","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1afb3bfc.chunk.js","sourcesContent":["import AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './KeyResult.css';\n\n// svg lines for tree kind marking\nconst svgMarker = (\n  <svg height=\"100%\" width=\"5rem\" className=\"key-result-marker\">\n    <line x1=\"1.87rem\" y1=\"0\" x2=\"1.87rem\" y2=\"100%\" className=\"marker\" />\n    <line x1=\"1.87rem\" y1=\"47%\" x2=\"2.75rem\" y2=\"47%\" className=\"marker\" />\n  </svg>\n);\n\n// for alphabets indexing\nconst charCodeStart = 97;\nconst alphabetsCount = 26;\n\nconst KeyResult = ({ okr, index, selectOKR }) => {\n  // calculating the index fro key result. It goes as a,b,...z,1a,1b,...1z,2a,...\n  const charCode = charCodeStart + (index % alphabetsCount);\n  const prefixNumber = Math.floor(index / alphabetsCount);\n  const indexCharacter = `${prefixNumber > 0 ? prefixNumber : ''}${String.fromCharCode(charCode)}`;\n\n  return (\n    <div className=\"okr-item\">\n      <div className=\"key-result title-wrap\">\n        <AccountCircleOutlinedIcon fontSize=\"small\" color=\"disabled\" />\n&emsp;\n        <span className=\"okr-title\" title={okr.title} onClick={() => selectOKR(okr)}>\n          {indexCharacter}\n          .&nbsp;&nbsp;\n          {okr.title}\n\n        </span>\n      </div>\n      {svgMarker}\n    </div>\n  );\n};\n\nKeyResult.propTypes = {\n  okr: PropTypes.shape({\n    title: PropTypes.string,\n  }).isRequired,\n  index: PropTypes.number,\n  selectOKR: PropTypes.func,\n};\n\nKeyResult.defaultProps = {\n  index: 0,\n  selectOKR: () => {},\n};\n\nexport default KeyResult;\n","import AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport ArrowRightOutlinedIcon from '@material-ui/icons/ArrowRightOutlined';\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport KeyResult from '../keyResult/KeyResult';\nimport './Objective.css';\n\n// svg lines for tree kind marking\nconst svgMarker = (\n  <svg height=\"35%\" className=\"objective-expansion-marker\">\n    <line x1=\"1.87rem\" y1=\"0\" x2=\"1.87rem\" y2=\"100%\" className=\"marker\" />\n  </svg>\n);\n\nconst Objective = ({\n  okr, keyResults, index, selectOKR,\n}) => {\n  const [expanded, setExpanded] = useState(true);\n\n  const onKeyResultSelect = (selectedOKR) => {\n    selectOKR({\n      ...selectedOKR,\n      parentObjective: okr.title,\n    });\n  };\n  const keyResultElements = keyResults\n    && keyResults.map((keyResult, keyIndex) => (\n      <KeyResult\n        key={keyResult.id}\n        index={keyIndex}\n        okr={keyResult}\n        selectOKR={onKeyResultSelect}\n      />\n    ));\n\n  return (\n    <>\n      <div className=\"objective okr-item title-wrap\">\n        {!expanded\n          && (\n          <ArrowRightOutlinedIcon\n            fontSize=\"small\"\n            className=\"objective-arrow\"\n            data-testid=\"expand-icon\"\n            onClick={() => setExpanded(true)}\n          />\n          )}\n        {expanded\n          && (\n          <ArrowDropDownOutlinedIcon\n            fontSize=\"small\"\n            data-testid=\"colapse-icon\"\n            className=\"objective-arrow\"\n            onClick={() => setExpanded(false)}\n          />\n          )}\n        <AccountCircleOutlinedIcon fontSize=\"small\" color=\"disabled\" />\n          &emsp;\n        <span\n          className=\"okr-title\"\n          title={okr.title}\n          onClick={() => selectOKR(okr)}\n        >\n          {index}\n          .&nbsp;&nbsp;\n          {okr.title}\n\n        </span>\n        {expanded && keyResults && svgMarker}\n      </div>\n      {expanded && keyResultElements}\n    </>\n  );\n};\n\nObjective.propTypes = {\n  okr: PropTypes.shape({\n    title: PropTypes.string,\n  }).isRequired,\n  keyResults: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n  })),\n  index: PropTypes.number,\n  selectOKR: PropTypes.func,\n};\n\nObjective.defaultProps = {\n  keyResults: [],\n  index: 0,\n  selectOKR: () => {},\n};\n\nexport default Objective;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst style = {\n  margin: '5px',\n  padding: '5px',\n  border: '1px solid lightgray',\n  borderRadius: '3px',\n  display: 'inline-block',\n  cursor: 'pointer',\n};\n\nconst Filter = ({ category, selected, toggleFilter }) => (\n  <label style={style} onClick={() => toggleFilter(category)} className={selected ? 'filter-selected' : ''}>\n    {category}\n  </label>\n);\n\nFilter.propTypes = {\n  category: PropTypes.string.isRequired,\n  selected: PropTypes.bool,\n  toggleFilter: PropTypes.func,\n};\n\nFilter.defaultProps = {\n  selected: false,\n  toggleFilter: () => {},\n};\n\nexport default Filter;\n","import React, { useState } from 'react';\nimport ArrowRightOutlinedIcon from '@material-ui/icons/ArrowRightOutlined';\nimport ArrowDropDownOutlinedIcon from '@material-ui/icons/ArrowDropDownOutlined';\nimport PropTypes from 'prop-types';\nimport './Filters.css';\nimport Filter from '../filter/Filter';\n\nconst Filters = ({ filters, selectedFilters, toggleFilter }) => {\n  const [expanded, setExpanded] = useState(true);\n  return (\n    <>\n      {!expanded\n        && (\n        <ArrowRightOutlinedIcon\n          fontSize=\"small\"\n          className=\"filter-arrow\"\n          data-testid=\"filter-expand-icon\"\n          onClick={() => setExpanded(true)}\n        />\n        )}\n      {expanded\n        && (\n        <ArrowDropDownOutlinedIcon\n          fontSize=\"small\"\n          data-testid=\"filter-colapse-icon\"\n          className=\"filter-arrow\"\n          onClick={() => setExpanded(false)}\n        />\n        )}\n      <h4 id=\"filters-title\" onClick={() => setExpanded(!expanded)}>Filters</h4>\n      <br />\n      {expanded && filters.map((filter) => (\n        <Filter\n          key={filter}\n          category={filter}\n          toggleFilter={toggleFilter}\n          selected={selectedFilters.has(filter)}\n        />\n      ))}\n    </>\n  );\n};\n\nFilters.propTypes = {\n  filters: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectedFilters: PropTypes.shape(),\n  toggleFilter: PropTypes.func,\n};\n\nFilters.defaultProps = {\n  selectedFilters: new Set(),\n  toggleFilter: () => {},\n};\n\nexport default Filters;\n","import React from 'react';\nimport {\n  Dialog, DialogTitle, DialogActions, Button, DialogContent,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nconst OKRDetails = ({ okr, onClose }) => (\n  <Dialog open onClose={onClose} aria-labelledby=\"customized-dialog-title\">\n    <DialogTitle id=\"customized-dialog-title\" onClose={onClose}>\n      {okr.parentObjective ? 'Key Result' : 'Objective'}\n    </DialogTitle>\n    <DialogContent dividers>\n      <div>\n        <b>Title</b>\n        {' '}\n        :\n        {' '}\n        <i>{okr.title}</i>\n      </div>\n      {okr.parentObjective && (\n        <div>\n          <b>Objective</b>\n          {' '}\n          :\n          {' '}\n          <i>{okr.parentObjective}</i>\n        </div>\n      ) }\n      <div>\n        <b>Category</b>\n        {' '}\n        :\n        {' '}\n        <i>{okr.category}</i>\n      </div>\n      <div>\n        <b>Metric Name</b>\n        {' '}\n        :\n        {' '}\n        <i>{okr.metric_name}</i>\n      </div>\n      <div>\n        <b>Metric Start</b>\n        {' '}\n        :\n        {' '}\n        <i>{okr.metric_start}</i>\n      </div>\n      <div>\n        <b>Metric End</b>\n        {' '}\n        :\n        {' '}\n        <i>{okr.metric_end}</i>\n      </div>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose}>\n        Close\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nOKRDetails.propTypes = {\n  okr: PropTypes.shape({\n    title: PropTypes.string,\n    category: PropTypes.string,\n    metric_name: PropTypes.string,\n    metric_start: PropTypes.string,\n    metric_end: PropTypes.string,\n    parentObjective: PropTypes.string,\n  }).isRequired,\n  onClose: PropTypes.func,\n};\n\nOKRDetails.defaultProps = {\n  onClose: () => {},\n};\n\nexport default OKRDetails;\n","import React, { useEffect, useState } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Objective from '../objective/Objective';\nimport Filters from '../filters/Filters';\nimport OKRDetails from '../dialog/OKRDetails';\n\n// data api can be moved o endpoints constant file\nconst okrsAPI = 'https://okrcentral.github.io/sample-okrs/db.json';\n\n// okrs grouping amd filter are exraced from api response\nconst getFiltersAndOkrs = (data) => {\n  const okrs = {};\n  const filters = new Set();\n  data.forEach((okr) => {\n    filters.add(okr.category);\n    const parent = okr.parent_objective_id === '' ? 'objectives' : okr.parent_objective_id;\n    if (!(parent in okrs)) {\n      okrs[parent] = [];\n    }\n    okrs[parent].push(okr);\n  });\n  return [okrs, Array.from(filters)];\n};\n\nconst OKRs = () => {\n  const [okrs, setOkrs] = useState({\n    objectives: [],\n  });\n  const [filters, setFilters] = useState([]);\n  const [selectedFilters, setSelectedFilters] = useState(new Set());\n  const [selectedOKR, setSelectedOKR] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  // data api call\n  const fetchDataFromApi = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(okrsAPI);\n      const { data } = await response.json();\n      const [okrsFromAPI, filtersFromAPI] = getFiltersAndOkrs(data);\n      setOkrs(okrsFromAPI);\n      setFilters(filtersFromAPI);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDataFromApi();\n  }, []);\n\n  const toggleFilter = (filter) => {\n    const newSelectedFilters = new Set(selectedFilters);\n    if (newSelectedFilters.has(filter)) {\n      newSelectedFilters.delete(filter);\n    } else {\n      newSelectedFilters.add(filter);\n    }\n    setSelectedFilters(newSelectedFilters);\n  };\n\n  const getFilteredObjectives = () => {\n    let { objectives } = okrs;\n    if (selectedFilters.size > 0) {\n      objectives = objectives.filter((okr) => selectedFilters.has(okr.category));\n    }\n    return objectives.map((okr, index) => (\n      <Objective\n        key={okr.id}\n        keyResults={okrs[okr.id]}\n        okr={okr}\n        index={index + 1}\n        selectOKR={setSelectedOKR}\n      />\n    ));\n  };\n\n  return (\n    <section>\n      <h3>Objectives & Key Results</h3>\n      {loading && <LinearProgress />}\n      {filters.length > 0\n        && (\n        <Filters\n          filters={filters}\n          toggleFilter={toggleFilter}\n          selectedFilters={selectedFilters}\n        />\n        )}\n      { okrs.objectives && getFilteredObjectives() }\n      { error && (\n      <i>\n        No data -\n        {error}\n      </i>\n      ) }\n      {selectedOKR && <OKRDetails okr={selectedOKR} onClose={() => setSelectedOKR()} />}\n    </section>\n  );\n};\n\nexport default OKRs;\n","import React from 'react';\nimport './App.css';\nimport OKRs from './components/okr/OKRs';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Ally.io Assignment</h2>\n      </header>\n      <OKRs />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}